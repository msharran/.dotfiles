#!/usr/bin/env bash

# Don't have same projects in both HOST and GUEST.
# Currently there is no way to find that, but it also
# forces me to not edit and leave one uncommitted.

list_projects() {
    echo "$HOME/.dotfiles"
    echo "$HOME/.dotfiles-private"
}

list_remote_projects() {
    local vm_home=$(ssh vm 'echo $HOME')
    ssh vm "fd . $vm_home/projects/work $vm_home/projects/play -d 1 -t d; \
        fd . $vm_home/projects/play/labs $vm_home/projects/play/codingchallenges.fyi -d 2 -t d"
    echo "$vm_home/.ssh"
}

projects=$(list_projects)
remote_projects=$(list_remote_projects)

# Add a prefix to remote projects to distinguish them
remote_projects_with_prefix=$(echo "$remote_projects" | sed 's/^/vm: /')

# Combine both lists
all_projects=$(echo -e "${projects}\n${remote_projects_with_prefix}")

# Choose a project with fzf
selected=$(echo "$all_projects" | fzf)

if [ -z "$selected" ]; then
    echo "No project selected"
    exit 1
fi

selected_basename=$(basename "$selected")

# If Zed window already exists, focus it
aerospace_window_id=$(aerospace list-windows --all | grep -w Zed | grep -w $selected_basename | awk '{print $1}')
if [[ $? == 0 ]] && [[ -n "$aerospace_window_id" ]]; then
    aerospace focus --window-id $aerospace_window_id
else
    # Check if it's a remote project
    if [[ $selected == vm:* ]]; then
        # Extract the actual path by removing the "vm: " prefix
        remote_path=${selected#vm: }
        # Use zed with ssh:// protocol
        zed --wait "ssh://vm$remote_path"
    else
        # Local project
        zed --wait "$selected"
    fi
fi
